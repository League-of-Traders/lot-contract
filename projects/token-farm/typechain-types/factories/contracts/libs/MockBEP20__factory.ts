/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockBEP20,
  MockBEP20Interface,
} from "../../../contracts/libs/MockBEP20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516122d13803806122d1833981810160405281019061003291906104c4565b828233600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a75760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009e9190610590565b60405180910390fd5b6100b68161010d60201b60201c565b5081600490816100c691906107c2565b5080600590816100d691906107c2565b506012600660006101000a81548160ff021916908360ff160217905550505061010533826101d160201b60201c565b50505061099e565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610240576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610237906108f1565b60405180910390fd5b80600360008282546102529190610940565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102a89190610940565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161030d9190610983565b60405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038082610337565b810181811067ffffffffffffffff8211171561039f5761039e610348565b5b80604052505050565b60006103b2610319565b90506103be8282610377565b919050565b600067ffffffffffffffff8211156103de576103dd610348565b5b6103e782610337565b9050602081019050919050565b60005b838110156104125780820151818401526020810190506103f7565b60008484015250505050565b600061043161042c846103c3565b6103a8565b90508281526020810184848401111561044d5761044c610332565b5b6104588482856103f4565b509392505050565b600082601f8301126104755761047461032d565b5b815161048584826020860161041e565b91505092915050565b6000819050919050565b6104a18161048e565b81146104ac57600080fd5b50565b6000815190506104be81610498565b92915050565b6000806000606084860312156104dd576104dc610323565b5b600084015167ffffffffffffffff8111156104fb576104fa610328565b5b61050786828701610460565b935050602084015167ffffffffffffffff81111561052857610527610328565b5b61053486828701610460565b9250506040610545868287016104af565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061057a8261054f565b9050919050565b61058a8161056f565b82525050565b60006020820190506105a56000830184610581565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105fd57607f821691505b6020821081036106105761060f6105b6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261063b565b610682868361063b565b95508019841693508086168417925050509392505050565b6000819050919050565b60006106bf6106ba6106b58461048e565b61069a565b61048e565b9050919050565b6000819050919050565b6106d9836106a4565b6106ed6106e5826106c6565b848454610648565b825550505050565b600090565b6107026106f5565b61070d8184846106d0565b505050565b5b81811015610731576107266000826106fa565b600181019050610713565b5050565b601f8211156107765761074781610616565b6107508461062b565b8101602085101561075f578190505b61077361076b8561062b565b830182610712565b50505b505050565b600082821c905092915050565b60006107996000198460080261077b565b1980831691505092915050565b60006107b28383610788565b9150826002028217905092915050565b6107cb826105ab565b67ffffffffffffffff8111156107e4576107e3610348565b5b6107ee82546105e5565b6107f9828285610735565b600060209050601f83116001811461082c576000841561081a578287015190505b61082485826107a6565b86555061088c565b601f19841661083a86610616565b60005b828110156108625784890151825560018201915060208501945060208101905061083d565b8683101561087f578489015161087b601f891682610788565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f42455032303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006108db601f83610894565b91506108e6826108a5565b602082019050919050565b6000602082019050818103600083015261090a816108ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061094b8261048e565b91506109568361048e565b925082820190508082111561096e5761096d610911565b5b92915050565b61097d8161048e565b82525050565b60006020820190506109986000830184610974565b92915050565b611924806109ad6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063893d20e8116100a2578063a0712d6811610071578063a0712d68146102aa578063a457c2d7146102da578063a9059cbb1461030a578063dd62ed3e1461033a578063f2fde38b1461036a5761010b565b8063893d20e8146102345780638da5cb5b1461025257806395d89b411461027057806397304ced1461028e5761010b565b8063313ce567116100de578063313ce567146101ac57806339509351146101ca57806370a08231146101fa578063715018a61461022a5761010b565b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015e57806323b872dd1461017c575b600080fd5b610118610386565b60405161012591906110e4565b60405180910390f35b6101486004803603810190610143919061119f565b610418565b60405161015591906111fa565b60405180910390f35b610166610436565b6040516101739190611224565b60405180910390f35b6101966004803603810190610191919061123f565b610440565b6040516101a391906111fa565b60405180910390f35b6101b4610541565b6040516101c191906112ae565b60405180910390f35b6101e460048036038101906101df919061119f565b610558565b6040516101f191906111fa565b60405180910390f35b610214600480360381019061020f91906112c9565b610604565b6040516102219190611224565b60405180910390f35b61023261064d565b005b61023c610661565b6040516102499190611305565b60405180910390f35b61025a610670565b6040516102679190611305565b60405180910390f35b610278610699565b60405161028591906110e4565b60405180910390f35b6102a860048036038101906102a39190611320565b61072b565b005b6102c460048036038101906102bf9190611320565b610738565b6040516102d191906111fa565b60405180910390f35b6102f460048036038101906102ef919061119f565b61075c565b60405161030191906111fa565b60405180910390f35b610324600480360381019061031f919061119f565b610850565b60405161033191906111fa565b60405180910390f35b610354600480360381019061034f919061134d565b61086e565b6040516103619190611224565b60405180910390f35b610384600480360381019061037f91906112c9565b6108f5565b005b606060048054610395906113bc565b80601f01602080910402602001604051908101604052809291908181526020018280546103c1906113bc565b801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b5050505050905090565b600061042c61042561097b565b8484610983565b6001905092915050565b6000600354905090565b600061044d848484610b4c565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061049861097b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f9061145f565b60405180910390fd5b6105358561052461097b565b858461053091906114ae565b610983565b60019150509392505050565b6000600660009054906101000a900460ff16905090565b60006105fa61056561097b565b84846002600061057361097b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105f591906114e2565b610983565b6001905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610655610dc1565b61065f6000610e48565b565b600061066b610670565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600580546106a8906113bc565b80601f01602080910402602001604051908101604052809291908181526020018280546106d4906113bc565b80156107215780601f106106f657610100808354040283529160200191610721565b820191906000526020600020905b81548152906001019060200180831161070457829003601f168201915b5050505050905090565b6107353382610f0c565b50565b6000610742610dc1565b61075361074d61097b565b83610f0c565b60019050919050565b6000806002600061076b61097b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081f90611588565b60405180910390fd5b61084561083361097b565b85858461084091906114ae565b610983565b600191505092915050565b600061086461085d61097b565b8484610b4c565b6001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6108fd610dc1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361096f5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109669190611305565b60405180910390fd5b61097881610e48565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e99061161a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a58906116ac565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b3f9190611224565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb29061173e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c21906117d0565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca890611862565b60405180910390fd5b8181610cbd91906114ae565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d4f91906114e2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610db39190611224565b60405180910390a350505050565b610dc961097b565b73ffffffffffffffffffffffffffffffffffffffff16610de7610670565b73ffffffffffffffffffffffffffffffffffffffff1614610e4657610e0a61097b565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610e3d9190611305565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f72906118ce565b60405180910390fd5b8060036000828254610f8d91906114e2565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fe391906114e2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110489190611224565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561108e578082015181840152602081019050611073565b60008484015250505050565b6000601f19601f8301169050919050565b60006110b682611054565b6110c0818561105f565b93506110d0818560208601611070565b6110d98161109a565b840191505092915050565b600060208201905081810360008301526110fe81846110ab565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111368261110b565b9050919050565b6111468161112b565b811461115157600080fd5b50565b6000813590506111638161113d565b92915050565b6000819050919050565b61117c81611169565b811461118757600080fd5b50565b60008135905061119981611173565b92915050565b600080604083850312156111b6576111b5611106565b5b60006111c485828601611154565b92505060206111d58582860161118a565b9150509250929050565b60008115159050919050565b6111f4816111df565b82525050565b600060208201905061120f60008301846111eb565b92915050565b61121e81611169565b82525050565b60006020820190506112396000830184611215565b92915050565b60008060006060848603121561125857611257611106565b5b600061126686828701611154565b935050602061127786828701611154565b92505060406112888682870161118a565b9150509250925092565b600060ff82169050919050565b6112a881611292565b82525050565b60006020820190506112c3600083018461129f565b92915050565b6000602082840312156112df576112de611106565b5b60006112ed84828501611154565b91505092915050565b6112ff8161112b565b82525050565b600060208201905061131a60008301846112f6565b92915050565b60006020828403121561133657611335611106565b5b60006113448482850161118a565b91505092915050565b6000806040838503121561136457611363611106565b5b600061137285828601611154565b925050602061138385828601611154565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113d457607f821691505b6020821081036113e7576113e661138d565b5b50919050565b7f42455032303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b600061144960288361105f565b9150611454826113ed565b604082019050919050565b600060208201905081810360008301526114788161143c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114b982611169565b91506114c483611169565b92508282039050818111156114dc576114db61147f565b5b92915050565b60006114ed82611169565b91506114f883611169565b92508282019050808211156115105761150f61147f565b5b92915050565b7f42455032303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061157260258361105f565b915061157d82611516565b604082019050919050565b600060208201905081810360008301526115a181611565565b9050919050565b7f42455032303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061160460248361105f565b915061160f826115a8565b604082019050919050565b60006020820190508181036000830152611633816115f7565b9050919050565b7f42455032303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061169660228361105f565b91506116a18261163a565b604082019050919050565b600060208201905081810360008301526116c581611689565b9050919050565b7f42455032303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061172860258361105f565b9150611733826116cc565b604082019050919050565b600060208201905081810360008301526117578161171b565b9050919050565b7f42455032303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006117ba60238361105f565b91506117c58261175e565b604082019050919050565b600060208201905081810360008301526117e9816117ad565b9050919050565b7f42455032303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061184c60268361105f565b9150611857826117f0565b604082019050919050565b6000602082019050818103600083015261187b8161183f565b9050919050565b7f42455032303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006118b8601f8361105f565b91506118c382611882565b602082019050919050565b600060208201905081810360008301526118e7816118ab565b905091905056fea2646970667358221220b157d8f6a8205c2815ed3cdae24523252e2aaf3a8ef8c535babf9c176652dafd64736f6c634300081a0033";

type MockBEP20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBEP20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBEP20__factory extends ContractFactory {
  constructor(...args: MockBEP20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    supply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, supply, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    supply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, supply, overrides || {}) as Promise<
      MockBEP20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockBEP20__factory {
    return super.connect(runner) as MockBEP20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBEP20Interface {
    return new Interface(_abi) as MockBEP20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockBEP20 {
    return new Contract(address, _abi, runner) as unknown as MockBEP20;
  }
}
