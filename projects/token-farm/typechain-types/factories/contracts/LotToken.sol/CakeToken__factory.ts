/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CakeToken,
  CakeTokenInterface,
} from "../../../contracts/LotToken.sol/CakeToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040518060400160405280601781526020017f4c6561677565206f66207472616465727320746f6b656e0000000000000000008152506040518060400160405280600381526020017f4c4f54000000000000000000000000000000000000000000000000000000000081525033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100f05760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100e79190610248565b60405180910390fd5b6100ff8161014360201b60201c565b50816004908161010f91906104b3565b50806005908161011f91906104b3565b506012600660006101000a81548160ff021916908360ff1602179055505050610585565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023282610207565b9050919050565b61024281610227565b82525050565b600060208201905061025d6000830184610239565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102e457607f821691505b6020821081036102f7576102f661029d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261035f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610322565b6103698683610322565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006103b06103ab6103a684610381565b61038b565b610381565b9050919050565b6000819050919050565b6103ca83610395565b6103de6103d6826103b7565b84845461032f565b825550505050565b600090565b6103f36103e6565b6103fe8184846103c1565b505050565b5b81811015610422576104176000826103eb565b600181019050610404565b5050565b601f82111561046757610438816102fd565b61044184610312565b81016020851015610450578190505b61046461045c85610312565b830182610403565b50505b505050565b600082821c905092915050565b600061048a6000198460080261046c565b1980831691505092915050565b60006104a38383610479565b9150826002028217905092915050565b6104bc82610263565b67ffffffffffffffff8111156104d5576104d461026e565b5b6104df82546102cc565b6104ea828285610426565b600060209050601f83116001811461051d576000841561050b578287015190505b6105158582610497565b86555061057d565b601f19841661052b866102fd565b60005b828110156105535784890151825560018201915060208501945060208101905061052e565b86831015610570578489015161056c601f891682610479565b8355505b6001600288020188555050505b505050505050565b611980806105946000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80637ecebe00116100a2578063a0712d6811610071578063a0712d68146102e5578063a457c2d714610315578063a9059cbb14610345578063dd62ed3e14610375578063f2fde38b146103a557610116565b80637ecebe001461025b578063893d20e81461028b5780638da5cb5b146102a957806395d89b41146102c757610116565b8063313ce567116100e9578063313ce567146101b757806339509351146101d557806340c10f191461020557806370a0823114610221578063715018a61461025157610116565b806306fdde031461011b578063095ea7b31461013957806318160ddd1461016957806323b872dd14610187575b600080fd5b6101236103c1565b6040516101309190611140565b60405180910390f35b610153600480360381019061014e91906111fb565b610453565b6040516101609190611256565b60405180910390f35b610171610471565b60405161017e9190611280565b60405180910390f35b6101a1600480360381019061019c919061129b565b61047b565b6040516101ae9190611256565b60405180910390f35b6101bf61057c565b6040516101cc919061130a565b60405180910390f35b6101ef60048036038101906101ea91906111fb565b610593565b6040516101fc9190611256565b60405180910390f35b61021f600480360381019061021a91906111fb565b61063f565b005b61023b60048036038101906102369190611325565b610655565b6040516102489190611280565b60405180910390f35b61025961069e565b005b61027560048036038101906102709190611325565b6106b2565b6040516102829190611280565b60405180910390f35b6102936106ca565b6040516102a09190611361565b60405180910390f35b6102b16106d9565b6040516102be9190611361565b60405180910390f35b6102cf610702565b6040516102dc9190611140565b60405180910390f35b6102ff60048036038101906102fa919061137c565b610794565b60405161030c9190611256565b60405180910390f35b61032f600480360381019061032a91906111fb565b6107b8565b60405161033c9190611256565b60405180910390f35b61035f600480360381019061035a91906111fb565b6108ac565b60405161036c9190611256565b60405180910390f35b61038f600480360381019061038a91906113a9565b6108ca565b60405161039c9190611280565b60405180910390f35b6103bf60048036038101906103ba9190611325565b610951565b005b6060600480546103d090611418565b80601f01602080910402602001604051908101604052809291908181526020018280546103fc90611418565b80156104495780601f1061041e57610100808354040283529160200191610449565b820191906000526020600020905b81548152906001019060200180831161042c57829003601f168201915b5050505050905090565b60006104676104606109d7565b84846109df565b6001905092915050565b6000600354905090565b6000610488848484610ba8565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006104d36109d7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a906114bb565b60405180910390fd5b6105708561055f6109d7565b858461056b919061150a565b6109df565b60019150509392505050565b6000600660009054906101000a900460ff16905090565b60006106356105a06109d7565b8484600260006105ae6109d7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610630919061153e565b6109df565b6001905092915050565b610647610e1d565b6106518282610ea4565b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106a6610e1d565b6106b06000610fec565b565b60076020528060005260406000206000915090505481565b60006106d46106d9565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805461071190611418565b80601f016020809104026020016040519081016040528092919081815260200182805461073d90611418565b801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b5050505050905090565b600061079e610e1d565b6107af6107a96109d7565b83610ea4565b60019050919050565b600080600260006107c76109d7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087b906115e4565b60405180910390fd5b6108a161088f6109d7565b85858461089c919061150a565b6109df565b600191505092915050565b60006108c06108b96109d7565b8484610ba8565b6001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610959610e1d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109cb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109c29190611361565b60405180910390fd5b6109d481610fec565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4590611676565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab490611708565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b9b9190611280565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0e9061179a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7d9061182c565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906118be565b60405180910390fd5b8181610d19919061150a565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dab919061153e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e0f9190611280565b60405180910390a350505050565b610e256109d7565b73ffffffffffffffffffffffffffffffffffffffff16610e436106d9565b73ffffffffffffffffffffffffffffffffffffffff1614610ea257610e666109d7565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610e999190611361565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0a9061192a565b60405180910390fd5b8060036000828254610f25919061153e565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f7b919061153e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fe09190611280565b60405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110ea5780820151818401526020810190506110cf565b60008484015250505050565b6000601f19601f8301169050919050565b6000611112826110b0565b61111c81856110bb565b935061112c8185602086016110cc565b611135816110f6565b840191505092915050565b6000602082019050818103600083015261115a8184611107565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061119282611167565b9050919050565b6111a281611187565b81146111ad57600080fd5b50565b6000813590506111bf81611199565b92915050565b6000819050919050565b6111d8816111c5565b81146111e357600080fd5b50565b6000813590506111f5816111cf565b92915050565b6000806040838503121561121257611211611162565b5b6000611220858286016111b0565b9250506020611231858286016111e6565b9150509250929050565b60008115159050919050565b6112508161123b565b82525050565b600060208201905061126b6000830184611247565b92915050565b61127a816111c5565b82525050565b60006020820190506112956000830184611271565b92915050565b6000806000606084860312156112b4576112b3611162565b5b60006112c2868287016111b0565b93505060206112d3868287016111b0565b92505060406112e4868287016111e6565b9150509250925092565b600060ff82169050919050565b611304816112ee565b82525050565b600060208201905061131f60008301846112fb565b92915050565b60006020828403121561133b5761133a611162565b5b6000611349848285016111b0565b91505092915050565b61135b81611187565b82525050565b60006020820190506113766000830184611352565b92915050565b60006020828403121561139257611391611162565b5b60006113a0848285016111e6565b91505092915050565b600080604083850312156113c0576113bf611162565b5b60006113ce858286016111b0565b92505060206113df858286016111b0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061143057607f821691505b602082108103611443576114426113e9565b5b50919050565b7f42455032303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006114a56028836110bb565b91506114b082611449565b604082019050919050565b600060208201905081810360008301526114d481611498565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611515826111c5565b9150611520836111c5565b9250828203905081811115611538576115376114db565b5b92915050565b6000611549826111c5565b9150611554836111c5565b925082820190508082111561156c5761156b6114db565b5b92915050565b7f42455032303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006115ce6025836110bb565b91506115d982611572565b604082019050919050565b600060208201905081810360008301526115fd816115c1565b9050919050565b7f42455032303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006116606024836110bb565b915061166b82611604565b604082019050919050565b6000602082019050818103600083015261168f81611653565b9050919050565b7f42455032303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006116f26022836110bb565b91506116fd82611696565b604082019050919050565b60006020820190508181036000830152611721816116e5565b9050919050565b7f42455032303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006117846025836110bb565b915061178f82611728565b604082019050919050565b600060208201905081810360008301526117b381611777565b9050919050565b7f42455032303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006118166023836110bb565b9150611821826117ba565b604082019050919050565b6000602082019050818103600083015261184581611809565b9050919050565b7f42455032303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006118a86026836110bb565b91506118b38261184c565b604082019050919050565b600060208201905081810360008301526118d78161189b565b9050919050565b7f42455032303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611914601f836110bb565b915061191f826118de565b602082019050919050565b6000602082019050818103600083015261194381611907565b905091905056fea2646970667358221220fdba494e6a5d6c6d1bc9ec4b605c500a69fe58a5b32b25a7cee12ae772bc9e9664736f6c634300081a0033";

type CakeTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CakeTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CakeToken__factory extends ContractFactory {
  constructor(...args: CakeTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CakeToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CakeToken__factory {
    return super.connect(runner) as CakeToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CakeTokenInterface {
    return new Interface(_abi) as CakeTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CakeToken {
    return new Contract(address, _abi, runner) as unknown as CakeToken;
  }
}
